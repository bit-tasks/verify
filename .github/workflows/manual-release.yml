name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            # Use custom version
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
            # Remove 'v' prefix if present
            NEW_VERSION=${NEW_VERSION#v}
            
            # Update package.json with custom version
            npm version $NEW_VERSION --no-git-tag-version
          else
            # Use version bump type
            npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          fi
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Commit version bump
        run: |
          git add package.json
          git commit -m "chore: bump version to v${{ steps.version.outputs.new_version }}"
          git push

      - name: Create and push tag
        run: |
          git tag "v${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: Trigger release workflow
        run: |
          echo "Version v${{ steps.version.outputs.new_version }} has been tagged."
          echo "The release workflow will be triggered automatically."